<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Frame, std::allocator&lt;WasmEdge::Runtime::StackManager::Frame&gt; &gt;::back (1 samples, 0.44%)</title><rect x="1008.9" y="165" width="5.1" height="15.0" fill="rgb(212,176,47)" rx="2" ry="2" />
<text  x="1011.86" y="175.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadSectionContent&lt;WasmEdge::AST::ImportSection, WasmEdge::Loader::Loader::loadSection (1 samples, 0.44%)</title><rect x="113.5" y="245" width="5.2" height="15.0" fill="rgb(225,32,14)" rx="2" ry="2" />
<text  x="116.51" y="255.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.44%)</title><rect x="103.2" y="277" width="5.1" height="15.0" fill="rgb(254,188,52)" rx="2" ry="2" />
<text  x="106.16" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;WasmEdge::OpCode, std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;WasmEdge::OpCode&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.44%)</title><rect x="1169.3" y="357" width="5.2" height="15.0" fill="rgb(223,25,32)" rx="2" ry="2" />
<text  x="1172.30" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;WasmEdge::ErrCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (1 samples, 0.44%)</title><rect x="1158.9" y="373" width="5.2" height="15.0" fill="rgb(217,39,21)" rx="2" ry="2" />
<text  x="1161.95" y="383.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::loadValue&lt;double&gt; (2 samples, 0.88%)</title><rect x="848.4" y="181" width="10.4" height="15.0" fill="rgb(232,181,16)" rx="2" ry="2" />
<text  x="851.42" y="191.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.44%)</title><rect x="103.2" y="197" width="5.1" height="15.0" fill="rgb(210,125,9)" rx="2" ry="2" />
<text  x="106.16" y="207.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadSection (1 samples, 0.44%)</title><rect x="113.5" y="261" width="5.2" height="15.0" fill="rgb(207,214,44)" rx="2" ry="2" />
<text  x="116.51" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.44%)</title><rect x="1184.8" y="469" width="5.2" height="15.0" fill="rgb(252,2,36)" rx="2" ry="2" />
<text  x="1187.82" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.44%)</title><rect x="1184.8" y="485" width="5.2" height="15.0" fill="rgb(224,67,53)" rx="2" ry="2" />
<text  x="1187.82" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.44%)</title><rect x="1169.3" y="341" width="5.2" height="15.0" fill="rgb(242,95,12)" rx="2" ry="2" />
<text  x="1172.30" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.44%)</title><rect x="1164.1" y="389" width="5.2" height="15.0" fill="rgb(252,38,37)" rx="2" ry="2" />
<text  x="1167.12" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="843.2" y="149" width="5.2" height="15.0" fill="rgb(219,91,19)" rx="2" ry="2" />
<text  x="846.25" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="843.2" y="165" width="5.2" height="15.0" fill="rgb(208,117,30)" rx="2" ry="2" />
<text  x="846.25" y="175.5" ></text>
</g>
<g >
<title>__cxx_global_var_init.141 (1 samples, 0.44%)</title><rect x="1174.5" y="469" width="5.1" height="15.0" fill="rgb(252,3,26)" rx="2" ry="2" />
<text  x="1177.47" y="479.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::popFrame (1 samples, 0.44%)</title><rect x="1008.9" y="181" width="5.1" height="15.0" fill="rgb(215,188,23)" rx="2" ry="2" />
<text  x="1011.86" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="103.2" y="213" width="5.1" height="15.0" fill="rgb(218,201,39)" rx="2" ry="2" />
<text  x="106.16" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Frame, std::allocator&lt;WasmEdge::Runtime::StackManager::Frame&gt; &gt;::end (1 samples, 0.44%)</title><rect x="1008.9" y="149" width="5.1" height="15.0" fill="rgb(253,218,13)" rx="2" ry="2" />
<text  x="1011.86" y="159.5" ></text>
</g>
<g >
<title>__normal_iterator (1 samples, 0.44%)</title><rect x="962.3" y="133" width="5.2" height="15.0" fill="rgb(227,22,42)" rx="2" ry="2" />
<text  x="965.28" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Frame, std::allocator&lt;WasmEdge::Runtime::StackManager::Frame&gt; &gt;::back (1 samples, 0.44%)</title><rect x="962.3" y="165" width="5.2" height="15.0" fill="rgb(230,113,54)" rx="2" ry="2" />
<text  x="965.28" y="175.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.44%)</title><rect x="92.8" y="309" width="5.2" height="15.0" fill="rgb(230,43,12)" rx="2" ry="2" />
<text  x="95.81" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::runWasmFile (202 samples, 88.60%)</title><rect x="113.5" y="309" width="1045.4" height="15.0" fill="rgb(218,48,16)" rx="2" ry="2" />
<text  x="116.51" y="319.5" >WasmEdge::VM::VM::runWasmFile</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="1039.9" y="149" width="5.2" height="15.0" fill="rgb(240,120,20)" rx="2" ry="2" />
<text  x="1042.91" y="159.5" ></text>
</g>
<g >
<title>_Hashtable (1 samples, 0.44%)</title><rect x="1174.5" y="437" width="5.1" height="15.0" fill="rgb(206,100,13)" rx="2" ry="2" />
<text  x="1177.47" y="447.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLocalGetOp (15 samples, 6.58%)</title><rect x="863.9" y="197" width="77.7" height="15.0" fill="rgb(218,38,46)" rx="2" ry="2" />
<text  x="866.95" y="207.5" >WasmEdge..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;WasmEdge::ErrCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.44%)</title><rect x="1158.9" y="405" width="5.2" height="15.0" fill="rgb(235,41,15)" rx="2" ry="2" />
<text  x="1161.95" y="415.5" ></text>
</g>
<g >
<title>cxx20::expected&lt;void, WasmEdge::ErrCode&gt;::operator bool (6 samples, 2.63%)</title><rect x="242.9" y="213" width="31.0" height="15.0" fill="rgb(210,143,19)" rx="2" ry="2" />
<text  x="245.89" y="223.5" >cx..</text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.44%)</title><rect x="103.2" y="261" width="5.1" height="15.0" fill="rgb(226,197,44)" rx="2" ry="2" />
<text  x="106.16" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;WasmEdge::ErrCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.44%)</title><rect x="1158.9" y="389" width="5.2" height="15.0" fill="rgb(229,118,24)" rx="2" ry="2" />
<text  x="1161.95" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1 samples, 0.44%)</title><rect x="1179.6" y="341" width="5.2" height="15.0" fill="rgb(226,223,24)" rx="2" ry="2" />
<text  x="1182.65" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="373" width="1045.4" height="15.0" fill="rgb(247,175,54)" rx="2" ry="2" />
<text  x="116.51" y="383.5" >std::apply&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __in..</text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pushLabel (4 samples, 1.75%)</title><rect x="744.9" y="181" width="20.7" height="15.0" fill="rgb(249,157,23)" rx="2" ry="2" />
<text  x="747.91" y="191.5" ></text>
</g>
<g >
<title>operator (202 samples, 88.60%)</title><rect x="113.5" y="389" width="1045.4" height="15.0" fill="rgb(223,139,10)" rx="2" ry="2" />
<text  x="116.51" y="399.5" >operator</text>
</g>
<g >
<title>_fini (1 samples, 0.44%)</title><rect x="72.1" y="469" width="5.2" height="15.0" fill="rgb(237,124,13)" rx="2" ry="2" />
<text  x="75.11" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;WasmEdge::OpCode, std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;WasmEdge::OpCode&gt;, std::hash&lt;WasmEdge::OpCode&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.44%)</title><rect x="1169.3" y="373" width="5.2" height="15.0" fill="rgb(207,91,4)" rx="2" ry="2" />
<text  x="1172.30" y="383.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="357" width="1045.4" height="15.0" fill="rgb(206,28,53)" rx="2" ry="2" />
<text  x="116.51" y="367.5" >std::__apply_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int12..</text>
</g>
<g >
<title>WasmEdge::Executor::Executor::branchToLabel (3 samples, 1.32%)</title><rect x="786.3" y="181" width="15.5" height="15.0" fill="rgb(209,16,7)" rx="2" ry="2" />
<text  x="789.32" y="191.5" ></text>
</g>
<g >
<title>VariadicUnion&lt;3, const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="101" width="31.1" height="15.0" fill="rgb(227,19,1)" rx="2" ry="2" />
<text  x="618.53" y="111.5" >Va..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;WasmEdge::ErrCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.44%)</title><rect x="1158.9" y="421" width="5.2" height="15.0" fill="rgb(223,27,15)" rx="2" ry="2" />
<text  x="1161.95" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;WasmEdge::Runtime::StackManager::Label&gt;::construct&lt;WasmEdge::Runtime::StackManager::Label, unsigned long, unsigned int const&amp;, WasmEdge::AST::Instruction const*&amp;, std::optional&lt;WasmEdge::AST::Instruction const*&gt;&amp;&gt; (2 samples, 0.88%)</title><rect x="755.3" y="133" width="10.3" height="15.0" fill="rgb(205,118,25)" rx="2" ry="2" />
<text  x="758.26" y="143.5" ></text>
</g>
<g >
<title>WasmEdge::StatisticsConfigure::isCostMeasuring (1 samples, 0.44%)</title><rect x="217.0" y="213" width="5.2" height="15.0" fill="rgb(241,218,4)" rx="2" ry="2" />
<text  x="220.02" y="223.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.44%)</title><rect x="1034.7" y="69" width="5.2" height="15.0" fill="rgb(238,82,44)" rx="2" ry="2" />
<text  x="1037.74" y="79.5" ></text>
</g>
<g >
<title>main (2 samples, 0.88%)</title><rect x="98.0" y="469" width="10.3" height="15.0" fill="rgb(251,83,43)" rx="2" ry="2" />
<text  x="100.98" y="479.5" ></text>
</g>
<g >
<title>Variant&lt;const unsigned __int128 &amp;, void&gt; (6 samples, 2.63%)</title><rect x="615.5" y="181" width="31.1" height="15.0" fill="rgb(253,112,43)" rx="2" ry="2" />
<text  x="618.53" y="191.5" >Va..</text>
</g>
<g >
<title>wasmedge (228 samples, 100.00%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(241,224,46)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >wasmedge</text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::popFrame (1 samples, 0.44%)</title><rect x="1039.9" y="181" width="5.2" height="15.0" fill="rgb(249,111,27)" rx="2" ry="2" />
<text  x="1042.91" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Frame, std::allocator&lt;WasmEdge::Runtime::StackManager::Frame&gt; &gt;::back (3 samples, 1.32%)</title><rect x="724.2" y="165" width="15.5" height="15.0" fill="rgb(215,41,3)" rx="2" ry="2" />
<text  x="727.21" y="175.5" ></text>
</g>
<g >
<title>VariadicUnion&lt;5, const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="133" width="31.1" height="15.0" fill="rgb(237,225,44)" rx="2" ry="2" />
<text  x="618.53" y="143.5" >Va..</text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::getBottomN (4 samples, 1.75%)</title><rect x="983.0" y="181" width="20.7" height="15.0" fill="rgb(248,172,16)" rx="2" ry="2" />
<text  x="985.98" y="191.5" ></text>
</g>
<g >
<title>do_user_addr_fault (4 samples, 1.75%)</title><rect x="77.3" y="405" width="20.7" height="15.0" fill="rgb(235,110,49)" rx="2" ry="2" />
<text  x="80.28" y="415.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pop (1 samples, 0.44%)</title><rect x="781.1" y="181" width="5.2" height="15.0" fill="rgb(225,140,46)" rx="2" ry="2" />
<text  x="784.14" y="191.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::execute (201 samples, 88.16%)</title><rect x="118.7" y="229" width="1040.2" height="15.0" fill="rgb(221,173,21)" rx="2" ry="2" />
<text  x="121.68" y="239.5" >WasmEdge::Executor::Executor::execute</text>
</g>
<g >
<title>do_fault (1 samples, 0.44%)</title><rect x="1034.7" y="53" width="5.2" height="15.0" fill="rgb(238,175,8)" rx="2" ry="2" />
<text  x="1037.74" y="63.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StoreManager::getModule (1 samples, 0.44%)</title><rect x="838.1" y="181" width="5.1" height="15.0" fill="rgb(221,166,28)" rx="2" ry="2" />
<text  x="841.07" y="191.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrOp (3 samples, 1.32%)</title><rect x="765.6" y="181" width="15.5" height="15.0" fill="rgb(252,200,32)" rx="2" ry="2" />
<text  x="768.61" y="191.5" ></text>
</g>
<g >
<title>std::__invoke&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="341" width="1045.4" height="15.0" fill="rgb(210,23,1)" rx="2" ry="2" />
<text  x="116.51" y="351.5" >std::__invoke&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, _..</text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.44%)</title><rect x="1184.8" y="373" width="5.2" height="15.0" fill="rgb(234,107,32)" rx="2" ry="2" />
<text  x="1187.82" y="383.5" ></text>
</g>
<g >
<title>unordered_map (1 samples, 0.44%)</title><rect x="1169.3" y="453" width="5.2" height="15.0" fill="rgb(240,74,22)" rx="2" ry="2" />
<text  x="1172.30" y="463.5" ></text>
</g>
<g >
<title>VariadicUnion&lt;2, const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="85" width="31.1" height="15.0" fill="rgb(253,217,5)" rx="2" ry="2" />
<text  x="618.53" y="95.5" >Va..</text>
</g>
<g >
<title>[libm-2.31.so] (1 samples, 0.44%)</title><rect x="1034.7" y="181" width="5.2" height="15.0" fill="rgb(247,30,10)" rx="2" ry="2" />
<text  x="1037.74" y="191.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="437" width="1045.4" height="15.0" fill="rgb(213,39,31)" rx="2" ry="2" />
<text  x="116.51" y="447.5" >std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, lo..</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Frame, std::allocator&lt;WasmEdge::Runtime::StackManager::Frame&gt; &gt;::end (3 samples, 1.32%)</title><rect x="724.2" y="149" width="15.5" height="15.0" fill="rgb(240,35,34)" rx="2" ry="2" />
<text  x="727.21" y="159.5" ></text>
</g>
<g >
<title>__normal_iterator (1 samples, 0.44%)</title><rect x="1003.7" y="133" width="5.2" height="15.0" fill="rgb(210,209,46)" rx="2" ry="2" />
<text  x="1006.68" y="143.5" ></text>
</g>
<g >
<title>pair&lt;WasmEdge::OpCode, char const  (1 samples, 0.44%)</title><rect x="1179.6" y="453" width="5.2" height="15.0" fill="rgb(234,143,38)" rx="2" ry="2" />
<text  x="1182.65" y="463.5" ></text>
</g>
<g >
<title>VM (2 samples, 0.88%)</title><rect x="98.0" y="453" width="10.3" height="15.0" fill="rgb(230,72,30)" rx="2" ry="2" />
<text  x="100.98" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.44%)</title><rect x="1164.1" y="373" width="5.2" height="15.0" fill="rgb(252,229,25)" rx="2" ry="2" />
<text  x="1167.12" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="1039.9" y="133" width="5.2" height="15.0" fill="rgb(226,24,25)" rx="2" ry="2" />
<text  x="1042.91" y="143.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runFunction (201 samples, 88.16%)</title><rect x="118.7" y="245" width="1040.2" height="15.0" fill="rgb(244,62,14)" rx="2" ry="2" />
<text  x="121.68" y="255.5" >WasmEdge::Executor::Executor::runFunction</text>
</g>
<g >
<title>WasmEdge::Executor::Executor::enterFunction (6 samples, 2.63%)</title><rect x="807.0" y="181" width="31.1" height="15.0" fill="rgb(231,167,51)" rx="2" ry="2" />
<text  x="810.02" y="191.5" >Wa..</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (20 samples, 8.77%)</title><rect x="1055.4" y="181" width="103.5" height="15.0" fill="rgb(215,165,28)" rx="2" ry="2" />
<text  x="1058.44" y="191.5" >std::vector&lt;..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;WasmEdge::ErrCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt; &gt;::deallocate (1 samples, 0.44%)</title><rect x="1158.9" y="357" width="5.2" height="15.0" fill="rgb(251,67,10)" rx="2" ry="2" />
<text  x="1161.95" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.44%)</title><rect x="1179.6" y="389" width="5.2" height="15.0" fill="rgb(230,25,27)" rx="2" ry="2" />
<text  x="1182.65" y="399.5" ></text>
</g>
<g >
<title>__normal_iterator (10 samples, 4.39%)</title><rect x="1107.2" y="149" width="51.7" height="15.0" fill="rgb(232,76,25)" rx="2" ry="2" />
<text  x="1110.19" y="159.5" >__nor..</text>
</g>
<g >
<title>do_page_fault (1 samples, 0.44%)</title><rect x="1034.7" y="133" width="5.2" height="15.0" fill="rgb(240,3,37)" rx="2" ry="2" />
<text  x="1037.74" y="143.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::pop (21 samples, 9.21%)</title><rect x="1050.3" y="197" width="108.6" height="15.0" fill="rgb(250,224,27)" rx="2" ry="2" />
<text  x="1053.26" y="207.5" >WasmEdge::Run..</text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="843.2" y="181" width="5.2" height="15.0" fill="rgb(236,20,6)" rx="2" ry="2" />
<text  x="846.25" y="191.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.44%)</title><rect x="1034.7" y="85" width="5.2" height="15.0" fill="rgb(253,190,5)" rx="2" ry="2" />
<text  x="1037.74" y="95.5" ></text>
</g>
<g >
<title>WasmEdge::AST::Instruction::getTargetIndex (8 samples, 3.51%)</title><rect x="646.6" y="197" width="41.4" height="15.0" fill="rgb(224,157,10)" rx="2" ry="2" />
<text  x="649.58" y="207.5" >Was..</text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::size (3 samples, 1.32%)</title><rect x="703.5" y="165" width="15.5" height="15.0" fill="rgb(212,84,13)" rx="2" ry="2" />
<text  x="706.51" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;WasmEdge::Runtime::StackManager::Label&gt; &gt;::construct&lt;WasmEdge::Runtime::StackManager::Label, unsigned long, unsigned int const&amp;, WasmEdge::AST::Instruction const*&amp;, std::optional&lt;WasmEdge::AST::Instruction const*&gt;&amp;&gt; (2 samples, 0.88%)</title><rect x="755.3" y="149" width="10.3" height="15.0" fill="rgb(248,167,49)" rx="2" ry="2" />
<text  x="758.26" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.44%)</title><rect x="1164.1" y="421" width="5.2" height="15.0" fill="rgb(243,82,33)" rx="2" ry="2" />
<text  x="1167.12" y="431.5" ></text>
</g>
<g >
<title>Label (2 samples, 0.88%)</title><rect x="755.3" y="117" width="10.3" height="15.0" fill="rgb(251,114,2)" rx="2" ry="2" />
<text  x="758.26" y="127.5" ></text>
</g>
<g >
<title>~_Hashtable (1 samples, 0.44%)</title><rect x="1158.9" y="453" width="5.2" height="15.0" fill="rgb(248,167,17)" rx="2" ry="2" />
<text  x="1161.95" y="463.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::runWasmFile (201 samples, 88.16%)</title><rect x="118.7" y="293" width="1040.2" height="15.0" fill="rgb(205,226,9)" rx="2" ry="2" />
<text  x="121.68" y="303.5" >WasmEdge::VM::VM::runWasmFile</text>
</g>
<g >
<title>__normal_iterator (3 samples, 1.32%)</title><rect x="724.2" y="133" width="15.5" height="15.0" fill="rgb(231,3,38)" rx="2" ry="2" />
<text  x="727.21" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="1039.9" y="165" width="5.2" height="15.0" fill="rgb(215,131,18)" rx="2" ry="2" />
<text  x="1042.91" y="175.5" ></text>
</g>
<g >
<title>_Hashtable&lt;const std::pair&lt;const WasmEdge::OpCode, std::basic_string&lt;char&gt; &gt; *&gt; (1 samples, 0.44%)</title><rect x="1169.3" y="421" width="5.2" height="15.0" fill="rgb(218,41,4)" rx="2" ry="2" />
<text  x="1172.30" y="431.5" ></text>
</g>
<g >
<title>Variant&lt;6, const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="165" width="31.1" height="15.0" fill="rgb(223,23,41)" rx="2" ry="2" />
<text  x="618.53" y="175.5" >Va..</text>
</g>
<g >
<title>do_async_page_fault (4 samples, 1.75%)</title><rect x="77.3" y="453" width="20.7" height="15.0" fill="rgb(211,20,24)" rx="2" ry="2" />
<text  x="80.28" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (4 samples, 1.75%)</title><rect x="77.3" y="437" width="20.7" height="15.0" fill="rgb(220,134,2)" rx="2" ry="2" />
<text  x="80.28" y="447.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.44%)</title><rect x="92.8" y="293" width="5.2" height="15.0" fill="rgb(239,88,50)" rx="2" ry="2" />
<text  x="95.81" y="303.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runReturnOp (1 samples, 0.44%)</title><rect x="1008.9" y="197" width="5.1" height="15.0" fill="rgb(235,149,53)" rx="2" ry="2" />
<text  x="1011.86" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (1 samples, 0.44%)</title><rect x="1179.6" y="373" width="5.2" height="15.0" fill="rgb(228,103,54)" rx="2" ry="2" />
<text  x="1182.65" y="383.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.44%)</title><rect x="1184.8" y="341" width="5.2" height="15.0" fill="rgb(207,146,28)" rx="2" ry="2" />
<text  x="1187.82" y="351.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runGlobalGetOp (1 samples, 0.44%)</title><rect x="843.2" y="197" width="5.2" height="15.0" fill="rgb(230,109,43)" rx="2" ry="2" />
<text  x="846.25" y="207.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runTruncateOp&lt;double, int&gt; (1 samples, 0.44%)</title><rect x="1034.7" y="197" width="5.2" height="15.0" fill="rgb(251,66,29)" rx="2" ry="2" />
<text  x="1037.74" y="207.5" ></text>
</g>
<g >
<title>all (228 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(251,0,13)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="1034.7" y="101" width="5.2" height="15.0" fill="rgb(226,56,16)" rx="2" ry="2" />
<text  x="1037.74" y="111.5" ></text>
</g>
<g >
<title>operator (171 samples, 75.00%)</title><rect x="273.9" y="213" width="885.0" height="15.0" fill="rgb(210,169,37)" rx="2" ry="2" />
<text  x="276.95" y="223.5" >operator</text>
</g>
<g >
<title>std::uninitialized_fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (2 samples, 0.88%)</title><rect x="98.0" y="373" width="10.3" height="15.0" fill="rgb(250,54,50)" rx="2" ry="2" />
<text  x="100.98" y="383.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.44%)</title><rect x="113.5" y="229" width="5.2" height="15.0" fill="rgb(239,171,7)" rx="2" ry="2" />
<text  x="116.51" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="776.0" y="133" width="5.1" height="15.0" fill="rgb(253,110,29)" rx="2" ry="2" />
<text  x="778.96" y="143.5" ></text>
</g>
<g >
<title>VariadicUnion&lt;4, const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="117" width="31.1" height="15.0" fill="rgb(238,174,54)" rx="2" ry="2" />
<text  x="618.53" y="127.5" >Va..</text>
</g>
<g >
<title>do_group_exit (1 samples, 0.44%)</title><rect x="1184.8" y="437" width="5.2" height="15.0" fill="rgb(243,130,41)" rx="2" ry="2" />
<text  x="1187.82" y="447.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::getMemInstByIdx (10 samples, 4.39%)</title><rect x="688.0" y="197" width="51.7" height="15.0" fill="rgb(225,223,23)" rx="2" ry="2" />
<text  x="690.98" y="207.5" >WasmE..</text>
</g>
<g >
<title>exit_mmap (1 samples, 0.44%)</title><rect x="1184.8" y="389" width="5.2" height="15.0" fill="rgb(220,215,2)" rx="2" ry="2" />
<text  x="1187.82" y="399.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLocalTeeOp (8 samples, 3.51%)</title><rect x="967.5" y="197" width="41.4" height="15.0" fill="rgb(232,26,29)" rx="2" ry="2" />
<text  x="970.46" y="207.5" >Was..</text>
</g>
<g >
<title>cxx20::detail::expected_view_base&lt;void, WasmEdge::ErrCode&gt;::has_value (6 samples, 2.63%)</title><rect x="242.9" y="197" width="31.0" height="15.0" fill="rgb(245,16,52)" rx="2" ry="2" />
<text  x="245.89" y="207.5" >cx..</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="1003.7" y="149" width="5.2" height="15.0" fill="rgb(250,64,28)" rx="2" ry="2" />
<text  x="1006.68" y="159.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLocalSetOp (5 samples, 2.19%)</title><rect x="941.6" y="197" width="25.9" height="15.0" fill="rgb(206,102,17)" rx="2" ry="2" />
<text  x="944.58" y="207.5" >W..</text>
</g>
<g >
<title>do_exit (1 samples, 0.44%)</title><rect x="1184.8" y="421" width="5.2" height="15.0" fill="rgb(249,136,12)" rx="2" ry="2" />
<text  x="1187.82" y="431.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::checkAccessBound (1 samples, 0.44%)</title><rect x="1029.6" y="165" width="5.1" height="15.0" fill="rgb(244,31,32)" rx="2" ry="2" />
<text  x="1032.56" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.44%)</title><rect x="1179.6" y="357" width="5.2" height="15.0" fill="rgb(232,63,32)" rx="2" ry="2" />
<text  x="1182.65" y="367.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (2 samples, 0.88%)</title><rect x="98.0" y="341" width="10.3" height="15.0" fill="rgb(225,218,52)" rx="2" ry="2" />
<text  x="100.98" y="351.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 1.32%)</title><rect x="82.5" y="389" width="15.5" height="15.0" fill="rgb(227,213,47)" rx="2" ry="2" />
<text  x="85.46" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="843.2" y="133" width="5.2" height="15.0" fill="rgb(209,62,13)" rx="2" ry="2" />
<text  x="846.25" y="143.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runCallOp (8 samples, 3.51%)</title><rect x="801.8" y="197" width="41.4" height="15.0" fill="rgb(230,140,31)" rx="2" ry="2" />
<text  x="804.84" y="207.5" >Was..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (7 samples, 3.07%)</title><rect x="1071.0" y="165" width="36.2" height="15.0" fill="rgb(206,20,45)" rx="2" ry="2" />
<text  x="1073.96" y="175.5" >__g..</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Frame, std::allocator&lt;WasmEdge::Runtime::StackManager::Frame&gt; &gt;::end (1 samples, 0.44%)</title><rect x="962.3" y="149" width="5.2" height="15.0" fill="rgb(231,34,22)" rx="2" ry="2" />
<text  x="965.28" y="159.5" ></text>
</g>
<g >
<title>unordered_map (1 samples, 0.44%)</title><rect x="1174.5" y="453" width="5.1" height="15.0" fill="rgb(228,39,39)" rx="2" ry="2" />
<text  x="1177.47" y="463.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::invoke (201 samples, 88.16%)</title><rect x="118.7" y="261" width="1040.2" height="15.0" fill="rgb(252,77,16)" rx="2" ry="2" />
<text  x="121.68" y="271.5" >WasmEdge::Executor::Executor::invoke</text>
</g>
<g >
<title>[unknown] (4 samples, 1.75%)</title><rect x="1164.1" y="485" width="20.7" height="15.0" fill="rgb(231,201,47)" rx="2" ry="2" />
<text  x="1167.12" y="495.5" ></text>
</g>
<g >
<title>VariadicUnion&lt;6, const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="149" width="31.1" height="15.0" fill="rgb(247,65,25)" rx="2" ry="2" />
<text  x="618.53" y="159.5" >Va..</text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::popLabel (1 samples, 0.44%)</title><rect x="776.0" y="149" width="5.1" height="15.0" fill="rgb(254,192,37)" rx="2" ry="2" />
<text  x="778.96" y="159.5" ></text>
</g>
<g >
<title>operator (1 samples, 0.44%)</title><rect x="113.5" y="197" width="5.2" height="15.0" fill="rgb(246,0,33)" rx="2" ry="2" />
<text  x="116.51" y="207.5" ></text>
</g>
<g >
<title>WasmEdge::AST::Instruction::getBlockType (1 samples, 0.44%)</title><rect x="739.7" y="181" width="5.2" height="15.0" fill="rgb(218,32,53)" rx="2" ry="2" />
<text  x="742.74" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (10 samples, 4.39%)</title><rect x="1107.2" y="165" width="51.7" height="15.0" fill="rgb(223,173,34)" rx="2" ry="2" />
<text  x="1110.19" y="175.5" >std::..</text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.44%)</title><rect x="92.8" y="357" width="5.2" height="15.0" fill="rgb(243,154,14)" rx="2" ry="2" />
<text  x="95.81" y="367.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadModule (1 samples, 0.44%)</title><rect x="113.5" y="277" width="5.2" height="15.0" fill="rgb(221,175,43)" rx="2" ry="2" />
<text  x="116.51" y="287.5" ></text>
</g>
<g >
<title>__normal_iterator (1 samples, 0.44%)</title><rect x="776.0" y="117" width="5.1" height="15.0" fill="rgb(209,57,25)" rx="2" ry="2" />
<text  x="778.96" y="127.5" ></text>
</g>
<g >
<title>~unordered_map (1 samples, 0.44%)</title><rect x="1158.9" y="469" width="5.2" height="15.0" fill="rgb(254,91,38)" rx="2" ry="2" />
<text  x="1161.95" y="479.5" ></text>
</g>
<g >
<title>vector (2 samples, 0.88%)</title><rect x="98.0" y="421" width="10.3" height="15.0" fill="rgb(228,109,20)" rx="2" ry="2" />
<text  x="100.98" y="431.5" ></text>
</g>
<g >
<title>__lru_cache_add (1 samples, 0.44%)</title><rect x="92.8" y="325" width="5.2" height="15.0" fill="rgb(207,19,34)" rx="2" ry="2" />
<text  x="95.81" y="335.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.44%)</title><rect x="103.2" y="309" width="5.1" height="15.0" fill="rgb(214,49,46)" rx="2" ry="2" />
<text  x="106.16" y="319.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.44%)</title><rect x="1034.7" y="117" width="5.2" height="15.0" fill="rgb(213,1,35)" rx="2" ry="2" />
<text  x="1037.74" y="127.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.44%)</title><rect x="108.3" y="469" width="5.2" height="15.0" fill="rgb(216,164,50)" rx="2" ry="2" />
<text  x="111.33" y="479.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="469" width="1045.4" height="15.0" fill="rgb(217,72,2)" rx="2" ry="2" />
<text  x="116.51" y="479.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned in..</text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::loadValue&lt;unsigned int&gt; (1 samples, 0.44%)</title><rect x="858.8" y="181" width="5.1" height="15.0" fill="rgb(208,227,33)" rx="2" ry="2" />
<text  x="861.77" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;WasmEdge::OpCode, std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;WasmEdge::OpCode&gt;, std::hash&lt;WasmEdge::OpCode&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::insert (1 samples, 0.44%)</title><rect x="1169.3" y="405" width="5.2" height="15.0" fill="rgb(227,215,8)" rx="2" ry="2" />
<text  x="1172.30" y="415.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::push&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 2.63%)</title><rect x="910.5" y="181" width="31.1" height="15.0" fill="rgb(219,113,11)" rx="2" ry="2" />
<text  x="913.53" y="191.5" >Wa..</text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::Instance::ModuleInstance*, std::allocator&lt;WasmEdge::Runtime::Instance::ModuleInstance*&gt; &gt;::size (1 samples, 0.44%)</title><rect x="838.1" y="149" width="5.1" height="15.0" fill="rgb(224,99,36)" rx="2" ry="2" />
<text  x="841.07" y="159.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::MemoryInstance::storeValue&lt;unsigned int&gt; (3 samples, 1.32%)</title><rect x="1019.2" y="181" width="15.5" height="15.0" fill="rgb(212,208,5)" rx="2" ry="2" />
<text  x="1022.21" y="191.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadDesc (1 samples, 0.44%)</title><rect x="113.5" y="181" width="5.2" height="15.0" fill="rgb(225,152,38)" rx="2" ry="2" />
<text  x="116.51" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="325" width="1045.4" height="15.0" fill="rgb(211,62,34)" rx="2" ry="2" />
<text  x="116.51" y="335.5" >std::__invoke_impl&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int1..</text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (1 samples, 0.44%)</title><rect x="92.8" y="341" width="5.2" height="15.0" fill="rgb(252,47,47)" rx="2" ry="2" />
<text  x="95.81" y="351.5" ></text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.44%)</title><rect x="103.2" y="293" width="5.1" height="15.0" fill="rgb(226,77,27)" rx="2" ry="2" />
<text  x="106.16" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.44%)</title><rect x="1184.8" y="453" width="5.2" height="15.0" fill="rgb(254,138,4)" rx="2" ry="2" />
<text  x="1187.82" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;WasmEdge::ErrCode, std::pair&lt;WasmEdge::ErrCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;WasmEdge::ErrCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;WasmEdge::ErrCode&gt;, std::hash&lt;WasmEdge::ErrCode&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.44%)</title><rect x="1158.9" y="437" width="5.2" height="15.0" fill="rgb(207,88,33)" rx="2" ry="2" />
<text  x="1161.95" y="447.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.44%)</title><rect x="1184.8" y="325" width="5.2" height="15.0" fill="rgb(242,69,51)" rx="2" ry="2" />
<text  x="1187.82" y="335.5" ></text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.44%)</title><rect x="1034.7" y="37" width="5.2" height="15.0" fill="rgb(243,195,52)" rx="2" ry="2" />
<text  x="1037.74" y="47.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (6 samples, 2.63%)</title><rect x="910.5" y="165" width="31.1" height="15.0" fill="rgb(229,61,48)" rx="2" ry="2" />
<text  x="913.53" y="175.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_fill_n_a&lt;unsigned long*, unsigned long, unsigned long, unsigned long&gt; (2 samples, 0.88%)</title><rect x="98.0" y="389" width="10.3" height="15.0" fill="rgb(252,169,24)" rx="2" ry="2" />
<text  x="100.98" y="399.5" ></text>
</g>
<g >
<title>__cxx_global_var_init.126 (2 samples, 0.88%)</title><rect x="1164.1" y="469" width="10.4" height="15.0" fill="rgb(208,108,17)" rx="2" ry="2" />
<text  x="1167.12" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="405" width="1045.4" height="15.0" fill="rgb(222,137,14)" rx="2" ry="2" />
<text  x="116.51" y="415.5" >std::__invoke_impl&lt;void, WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, floa..</text>
</g>
<g >
<title>WasmEdge::Loader::Loader::loadSectionContentVec&lt;WasmEdge::AST::ImportSection, WasmEdge::Loader::Loader::loadSection (1 samples, 0.44%)</title><rect x="113.5" y="213" width="5.2" height="15.0" fill="rgb(246,167,43)" rx="2" ry="2" />
<text  x="116.51" y="223.5" ></text>
</g>
<g >
<title>[unknown]  (223 samples, 97.81%)</title><rect x="10.0" y="485" width="1154.1" height="15.0" fill="rgb(246,110,32)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >[unknown] </text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::leaveLabel (2 samples, 0.88%)</title><rect x="1039.9" y="197" width="10.4" height="15.0" fill="rgb(240,219,34)" rx="2" ry="2" />
<text  x="1042.91" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_fill_initialize (2 samples, 0.88%)</title><rect x="98.0" y="405" width="10.3" height="15.0" fill="rgb(235,216,53)" rx="2" ry="2" />
<text  x="100.98" y="415.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (2 samples, 0.88%)</title><rect x="98.0" y="325" width="10.3" height="15.0" fill="rgb(226,14,21)" rx="2" ry="2" />
<text  x="100.98" y="335.5" ></text>
</g>
<g >
<title>async_page_fault (1 samples, 0.44%)</title><rect x="1034.7" y="165" width="5.2" height="15.0" fill="rgb(223,93,43)" rx="2" ry="2" />
<text  x="1037.74" y="175.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::getTop (1 samples, 0.44%)</title><rect x="1003.7" y="181" width="5.2" height="15.0" fill="rgb(241,118,13)" rx="2" ry="2" />
<text  x="1006.68" y="191.5" ></text>
</g>
<g >
<title>__cxx_global_var_init.27 (1 samples, 0.44%)</title><rect x="1179.6" y="469" width="5.2" height="15.0" fill="rgb(250,39,46)" rx="2" ry="2" />
<text  x="1182.65" y="479.5" ></text>
</g>
<g >
<title>Statistics (2 samples, 0.88%)</title><rect x="98.0" y="437" width="10.3" height="15.0" fill="rgb(249,182,34)" rx="2" ry="2" />
<text  x="100.98" y="447.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::isTopDummyFrame (4 samples, 1.75%)</title><rect x="719.0" y="181" width="20.7" height="15.0" fill="rgb(237,19,21)" rx="2" ry="2" />
<text  x="722.04" y="191.5" ></text>
</g>
<g >
<title>WasmEdge::AST::Instruction::getNum (6 samples, 2.63%)</title><rect x="615.5" y="197" width="31.1" height="15.0" fill="rgb(230,220,44)" rx="2" ry="2" />
<text  x="618.53" y="207.5" >Wa..</text>
</g>
<g >
<title>WasmEdge::StatisticsConfigure::isInstructionCounting (4 samples, 1.75%)</title><rect x="222.2" y="213" width="20.7" height="15.0" fill="rgb(225,4,47)" rx="2" ry="2" />
<text  x="225.19" y="223.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::Instance::ModuleInstance::getMemAddr (3 samples, 1.32%)</title><rect x="703.5" y="181" width="15.5" height="15.0" fill="rgb(239,89,35)" rx="2" ry="2" />
<text  x="706.51" y="191.5" ></text>
</g>
<g >
<title>WasmEdge::Loader::Loader::parseModule (1 samples, 0.44%)</title><rect x="113.5" y="293" width="5.2" height="15.0" fill="rgb(205,224,2)" rx="2" ry="2" />
<text  x="116.51" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (1 samples, 0.44%)</title><rect x="1164.1" y="405" width="5.2" height="15.0" fill="rgb(212,135,39)" rx="2" ry="2" />
<text  x="1167.12" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.44%)</title><rect x="103.2" y="245" width="5.1" height="15.0" fill="rgb(234,96,52)" rx="2" ry="2" />
<text  x="106.16" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;WasmEdge::OpCode, std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;WasmEdge::OpCode&gt;, std::hash&lt;WasmEdge::OpCode&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.44%)</title><rect x="1174.5" y="389" width="5.1" height="15.0" fill="rgb(223,21,39)" rx="2" ry="2" />
<text  x="1177.47" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="1003.7" y="165" width="5.2" height="15.0" fill="rgb(237,191,29)" rx="2" ry="2" />
<text  x="1006.68" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Label, std::allocator&lt;WasmEdge::Runtime::StackManager::Label&gt; &gt;::pop_back (1 samples, 0.44%)</title><rect x="1045.1" y="181" width="5.2" height="15.0" fill="rgb(249,101,37)" rx="2" ry="2" />
<text  x="1048.09" y="191.5" ></text>
</g>
<g >
<title>_Hashtable (1 samples, 0.44%)</title><rect x="1169.3" y="437" width="5.2" height="15.0" fill="rgb(226,48,24)" rx="2" ry="2" />
<text  x="1172.30" y="447.5" ></text>
</g>
<g >
<title>pair&lt;WasmEdge::OpCode, char const  (1 samples, 0.44%)</title><rect x="1164.1" y="453" width="5.2" height="15.0" fill="rgb(245,94,20)" rx="2" ry="2" />
<text  x="1167.12" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Runtime::StackManager::Label, std::allocator&lt;WasmEdge::Runtime::StackManager::Label&gt; &gt;::emplace_back&lt;unsigned long, unsigned int const&amp;, WasmEdge::AST::Instruction const*&amp;, std::optional&lt;WasmEdge::AST::Instruction const*&gt;&amp;&gt; (3 samples, 1.32%)</title><rect x="750.1" y="165" width="15.5" height="15.0" fill="rgb(228,180,3)" rx="2" ry="2" />
<text  x="753.09" y="175.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (1 samples, 0.44%)</title><rect x="1164.1" y="357" width="5.2" height="15.0" fill="rgb(249,200,11)" rx="2" ry="2" />
<text  x="1167.12" y="367.5" ></text>
</g>
<g >
<title>async_page_fault (4 samples, 1.75%)</title><rect x="77.3" y="469" width="20.7" height="15.0" fill="rgb(244,2,23)" rx="2" ry="2" />
<text  x="80.28" y="479.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLoadOp&lt;double&gt; (2 samples, 0.88%)</title><rect x="848.4" y="197" width="10.4" height="15.0" fill="rgb(252,210,6)" rx="2" ry="2" />
<text  x="851.42" y="207.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::branchToLabel (3 samples, 1.32%)</title><rect x="765.6" y="165" width="15.5" height="15.0" fill="rgb(228,209,21)" rx="2" ry="2" />
<text  x="768.61" y="175.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrOp (3 samples, 1.32%)</title><rect x="786.3" y="197" width="15.5" height="15.0" fill="rgb(223,137,47)" rx="2" ry="2" />
<text  x="789.32" y="207.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.88%)</title><rect x="87.6" y="373" width="10.4" height="15.0" fill="rgb(224,48,51)" rx="2" ry="2" />
<text  x="90.63" y="383.5" ></text>
</g>
<g >
<title>basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.44%)</title><rect x="1164.1" y="437" width="5.2" height="15.0" fill="rgb(253,109,39)" rx="2" ry="2" />
<text  x="1167.12" y="447.5" ></text>
</g>
<g >
<title>WasmEdge::VM::VM::execute (201 samples, 88.16%)</title><rect x="118.7" y="277" width="1040.2" height="15.0" fill="rgb(226,24,20)" rx="2" ry="2" />
<text  x="121.68" y="287.5" >WasmEdge::VM::VM::execute</text>
</g>
<g >
<title>WasmEdge::Runtime::StackManager::getOffset (1 samples, 0.44%)</title><rect x="962.3" y="181" width="5.2" height="15.0" fill="rgb(222,188,23)" rx="2" ry="2" />
<text  x="965.28" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (1 samples, 0.44%)</title><rect x="781.1" y="165" width="5.2" height="15.0" fill="rgb(219,174,16)" rx="2" ry="2" />
<text  x="784.14" y="175.5" ></text>
</g>
<g >
<title>std::__invoke&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="421" width="1045.4" height="15.0" fill="rgb(232,183,41)" rx="2" ry="2" />
<text  x="116.51" y="431.5" >std::__invoke&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, ..</text>
</g>
<g >
<title>__do_page_fault (4 samples, 1.75%)</title><rect x="77.3" y="421" width="20.7" height="15.0" fill="rgb(254,148,53)" rx="2" ry="2" />
<text  x="80.28" y="431.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBrIfOp (4 samples, 1.75%)</title><rect x="765.6" y="197" width="20.7" height="15.0" fill="rgb(209,204,28)" rx="2" ry="2" />
<text  x="768.61" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (4 samples, 1.75%)</title><rect x="983.0" y="165" width="20.7" height="15.0" fill="rgb(239,25,32)" rx="2" ry="2" />
<text  x="985.98" y="175.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runLoadOp&lt;unsigned int&gt; (1 samples, 0.44%)</title><rect x="858.8" y="197" width="5.1" height="15.0" fill="rgb(212,228,42)" rx="2" ry="2" />
<text  x="861.77" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.44%)</title><rect x="87.6" y="357" width="5.2" height="15.0" fill="rgb(205,31,28)" rx="2" ry="2" />
<text  x="90.63" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;WasmEdge::OpCode, std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;WasmEdge::OpCode&gt;, std::hash&lt;WasmEdge::OpCode&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::insert (1 samples, 0.44%)</title><rect x="1174.5" y="405" width="5.1" height="15.0" fill="rgb(215,193,20)" rx="2" ry="2" />
<text  x="1177.47" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (1 samples, 0.44%)</title><rect x="1179.6" y="405" width="5.2" height="15.0" fill="rgb(219,67,3)" rx="2" ry="2" />
<text  x="1182.65" y="415.5" ></text>
</g>
<g >
<title>__normal_iterator (1 samples, 0.44%)</title><rect x="1008.9" y="133" width="5.1" height="15.0" fill="rgb(250,125,15)" rx="2" ry="2" />
<text  x="1011.86" y="143.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runStoreOp&lt;unsigned int&gt; (4 samples, 1.75%)</title><rect x="1014.0" y="197" width="20.7" height="15.0" fill="rgb(211,128,38)" rx="2" ry="2" />
<text  x="1017.04" y="207.5" ></text>
</g>
<g >
<title>_Hashtable&lt;const std::pair&lt;const WasmEdge::OpCode, std::basic_string&lt;char&gt; &gt; *&gt; (1 samples, 0.44%)</title><rect x="1174.5" y="421" width="5.1" height="15.0" fill="rgb(250,30,53)" rx="2" ry="2" />
<text  x="1177.47" y="431.5" ></text>
</g>
<g >
<title>basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.44%)</title><rect x="1179.6" y="437" width="5.2" height="15.0" fill="rgb(252,116,29)" rx="2" ry="2" />
<text  x="1182.65" y="447.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.44%)</title><rect x="1184.8" y="357" width="5.2" height="15.0" fill="rgb(223,52,49)" rx="2" ry="2" />
<text  x="1187.82" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;WasmEdge::OpCode, std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;WasmEdge::OpCode&gt;, std::hash&lt;WasmEdge::OpCode&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;WasmEdge::OpCode const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.44%)</title><rect x="1169.3" y="389" width="5.2" height="15.0" fill="rgb(211,117,29)" rx="2" ry="2" />
<text  x="1172.30" y="399.5" ></text>
</g>
<g >
<title>WasmEdge::Runtime::StoreManager::getInstance&lt;WasmEdge::Runtime::Instance::ModuleInstance&gt; (1 samples, 0.44%)</title><rect x="838.1" y="165" width="5.1" height="15.0" fill="rgb(226,184,16)" rx="2" ry="2" />
<text  x="841.07" y="175.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.44%)</title><rect x="1184.8" y="309" width="5.2" height="15.0" fill="rgb(213,78,41)" rx="2" ry="2" />
<text  x="1187.82" y="319.5" ></text>
</g>
<g >
<title>WasmEdge::Executor::Executor::runBlockOp (5 samples, 2.19%)</title><rect x="739.7" y="197" width="25.9" height="15.0" fill="rgb(252,204,48)" rx="2" ry="2" />
<text  x="742.74" y="207.5" >W..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.44%)</title><rect x="103.2" y="229" width="5.1" height="15.0" fill="rgb(225,154,31)" rx="2" ry="2" />
<text  x="106.16" y="239.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.44%)</title><rect x="1184.8" y="405" width="5.2" height="15.0" fill="rgb(254,18,26)" rx="2" ry="2" />
<text  x="1187.82" y="415.5" ></text>
</g>
<g >
<title>VariadicUnion&lt;1, const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="69" width="31.1" height="15.0" fill="rgb(223,28,20)" rx="2" ry="2" />
<text  x="618.53" y="79.5" >Va..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.44%)</title><rect x="1179.6" y="421" width="5.2" height="15.0" fill="rgb(221,199,0)" rx="2" ry="2" />
<text  x="1182.65" y="431.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, long, float, double, unsigned __int128, __int128, unsigned long __vector (202 samples, 88.60%)</title><rect x="113.5" y="453" width="1045.4" height="15.0" fill="rgb(253,94,43)" rx="2" ry="2" />
<text  x="116.51" y="463.5" >std::thread::_Invoker&lt;std::tuple&lt;WasmEdge::VM::Async&lt;cxx20::expected&lt;std::vector&lt;std::pair&lt;WasmEdge::Variant&lt;unsigned int, int, unsigned long, lo..</text>
</g>
<g >
<title>VariadicUnion&lt;const unsigned __int128 &amp;&gt; (6 samples, 2.63%)</title><rect x="615.5" y="53" width="31.1" height="15.0" fill="rgb(245,155,36)" rx="2" ry="2" />
<text  x="618.53" y="63.5" >Va..</text>
</g>
<g >
<title>do_async_page_fault (1 samples, 0.44%)</title><rect x="1034.7" y="149" width="5.2" height="15.0" fill="rgb(226,6,15)" rx="2" ry="2" />
<text  x="1037.74" y="159.5" ></text>
</g>
<g >
<title>std::__uninitialized_fill_n&lt;true&gt;::__uninit_fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (2 samples, 0.88%)</title><rect x="98.0" y="357" width="10.3" height="15.0" fill="rgb(253,115,40)" rx="2" ry="2" />
<text  x="100.98" y="367.5" ></text>
</g>
</g>
</svg>
